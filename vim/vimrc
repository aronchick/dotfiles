" .vimrc
" Maintained by: Mark Nichols
" mark@zanshin.net
" http;//zanshin.net
"

" Forget compatibility with vi. Who cares.
set nocompatible

" Initialize vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

" My Bundles
"
" original repositories on github
Bundle 'altercation/vim-colors-solarized'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-fugitive'
Bundle 'bling/vim-airline'

" non github repositories
Bundle 'git://git.wincent.com/command-t.git'

" end of Vundle setup

" Enable filetypes
filetype on
filetype plugin on
filetype indent on
syntax on

" Navigation
" disable arrow keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

" use <C>hjkl to switch between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Encoding anyone?
set termencoding=utf-8  " we like utf-8
set encoding=utf-8

" What to do with files and focus
set autowrite           " write out old file when switching between files
set autoread            " reload files changed on disk, i.e. via `git checkout`
au FocusLost * :wa      " save file when Vim loses focus
set hidden              " switch beteen buffers without saving

" With Git who needs backup files?
set nobackup
set noswapfile

" Use a different map leader than \
" and reduce lag after typing leader key + command
:let mapleader = ","
set timeoutlen=500

" Set the color scheme
colorscheme Tomorrow-Night-Bright

" Set tab stuff
set tabstop=2           " 2 spaces for a tab
set shiftwidth=2        " 2 spaces for autoindenting
set softtabstop=2       " when <BS>, pretend a tab is removed even if spaces
set expandtab           " expand tabs to spaces (overloadable by file type)

" Editor and Layout stuff
set laststatus=2        " always show the status line
set cmdheight=2         " and use a two-line tall status line
set showcmd             " show the command
set showmode            " and show the current mode
set autoindent          " turns it on
set smartindent         " does the right thing (mostly) in programs
set linespace=3         " prefer a slight higher line height
set wrap                " use line wrapping
set textwidth=79        " at column 79
set formatoptions=qrn1
set ruler               " display current cursor position
set list                " show invisible characters
set listchars=tab:▸\ ,eol:¬,trail:⋅,nbsp:␣,extends:❯,precedes:❮
set showmatch           " show matching brackets
set relativenumber      " use relative line numbers
set backspace=indent,eol,start " make backspace behave in a sane manner

" toggle listchars on or off
noremap <Leader>i :set list!<CR>

" Paste mode to prevent autoindentation of pasted lines
set pastetoggle=<F2>

" Map escape to jj -- much faster to reach and type
imap jj <esc>

" Searching
set incsearch           " use incremental search
set hlsearch            " highlight search results
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search string is all lower case, case-sensitve otherwise

" Enable code folding
set foldenable

" Hide mouse when typing
set mousehide

" Splits
nnoremap <leader>v <C-w>v<C-w>l   " open a vertical split and switch to it (,v)
nnoremap <leader>h <C-w>s<C-w>j   " open a horizontal split and switch to it (,h)

" vimrc shortcuts
" open vimrc in new tab for editing
nmap <leader>ev :tabedit $MYVIMRC<cr>

" automatically source .vimrc when it is saved (from vimcasts.org #24)
if has("autocmd")
  autocmd! bufwritepost .vimrc source $MYVIMRC
endif

" reload .vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Command line completion
"set wildmode                 " navigate <left> & <right> through completion lists
"set wildmode=list:longest    " allows expansion of items

" --------------------------------------------------------
" control whitespace preferences based on filetype
" --------------------------------------------------------
if has("autocmd")
  " enable file type detection
  filetype on

  " syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd Filetype yaml setlocal ts=2 sts=2 sw=2 expandtab

  " treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  " markdown files
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown setfiletype markdown
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us

  " non ruby files related to Ruby
  autocmd BufNewFile,BufRead Gemfile,Gemfile.lock,Guardfile setfiletype ruby
  autocmd BufNewFile,BufRead Rakefile setfiletype rake
  autocmd BufNewFile,BufRead Rakefile set syntax=ruby
  autocmd BufNewFile,BufRead *.rake setfiletype rake
  autocmd BufNEwFile,BufRead *.rake set syntax=ruby

  " Python files
  let NERDTreeIgnore = ['\.pyc$', '\~$', '\.rbc$']
  autocmd BufNewFile,BufRead *.py set ts=2 sts=2 sw=2 expandtab

endif

" ----------------------------------------------------------
" Stuff for Bundles
" ----------------------------------------------------------
" NERDTree
nmap <leader>d :NERDTreeToggle <CR>
nmap <leader>f :NERDTreeFind <CR>

" show hidden files in NERDTree
let NERDTreeShowHidden=1

" Command-t
nmap <leader>t :CommandT <CR>
nmap <leader>T :CommandTFlush<CR>:CommandT<CR>

" vim-airline settings
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mixed-indent[%s]'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''


" ----------------------------------------------------------
"  finis
" ----------------------------------------------------------
